<Controls:MetroWindow
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    xmlns:local="clr-namespace:ChoEazyCopy"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    xmlns:sys="clr-namespace:System;assembly=mscorlib" 
    xmlns:Properties="clr-namespace:ChoEazyCopy.Properties"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"   
    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
    x:Class="ChoEazyCopy.MainWindow"
    Title="ChoEazyCopy - Cinchoo Inc."
    Height="600"
    Width="950"
    MinHeight="400"
    MinWidth="500"
    AllowDrop="True"
    Closed="Window_Closed"
    x:Name="ChoEazyCopyWindow"
    BorderBrush="{DynamicResource AccentColorBrush}"
    BorderThickness="1"
    TitleCaps="False"
    ResizeMode="CanResizeWithGrip"
    Loaded="Window_Loaded" Icon="App.ico" Closing="Window_Closing">
    <Controls:MetroWindow.RightWindowCommands>
        <Controls:WindowCommands>
            <Controls:ToggleSwitch Margin="10, 0, 0, 0" Foreground="LightYellow" FontSize="16" ToolTip="Remember windows position/size."
                                   IsChecked="{Binding RememberWindowSizeAndPosition}"
                                   />
        </Controls:WindowCommands>
    </Controls:MetroWindow.RightWindowCommands>
    <Controls:MetroWindow.LeftWindowCommands>
        <Controls:WindowCommands>
            <Button x:Name="btnApplicationCmds" ToolTip="Application Commands" Click="btnApplicationCmds_Click"  >
                <Image Source="{iconPacks:FontAwesomeImage Kind=CogSolid}" />
                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem x:Name="mnuLaunchNewInstance" Header="Launch New Instance" Click="mnuLaunchNewInstance_Click" >
                            <MenuItem.Icon>
                                <Image Source="Resources/OpenNewWindow.png" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem x:Name="mnuRunasAdministrator" Header="Run as Administrator" Click="mnuRunasAdministrator_Click" >
                            <MenuItem.Icon>
                                <Image Source="Resources/Security.png" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem x:Name="mnuRegisterShellExtensions" Header="Register Shell Extensions" Click="mnuRegisterShellExtensions_Click">
                            <MenuItem.Icon>
                                <Image Source="Resources/Registry.png" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem x:Name="mnuUnregisterShellExtensions" Header="Unregister Shell Extensions" Click="mnuUnregisterShellExtensions_Click" >
                            <MenuItem.Icon>
                                <Image Source="Resources/RemoveRegistry.png" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <Separator></Separator>
                        <MenuItem x:Name="mnuAlwaysOnTop" Header="Always on Top" IsCheckable="True" IsChecked="False" Click="mnuAlwaysOnTop_Click">
                            <!--<MenuItem.Icon>
                                <iconPacks:FontAwesome Kind="HandshakeRegular"></iconPacks:FontAwesome>
                            </MenuItem.Icon>-->
                        </MenuItem>
                        <MenuItem x:Name="mnuRunatSystemsStartup" Header="Run at Systems Startup" IsCheckable="True" 
                                  Click="mnuRunatSystemsStartup_Click">
                            <!--<MenuItem.Icon>
                                <iconPacks:FontAwesome Kind="ShieldAltSolid"></iconPacks:FontAwesome>
                            </MenuItem.Icon>-->
                        </MenuItem>

                    </ContextMenu>
                </Button.ContextMenu>
            </Button>
        </Controls:WindowCommands>
    </Controls:MetroWindow.LeftWindowCommands>
    <Window.Resources>
        <ContextMenu x:Key="expControlPanelContextMenu">
            <MenuItem x:Name="mnuResetExpander" Header="Reset" Click="mnuResetExpander_Click" />
        </ContextMenu>

        <ContextMenu x:Key="TextBoxContextMenu" Background="White">
            <MenuItem Command="ApplicationCommands.Copy">
                <MenuItem.Icon>
                    <Image Source="Resources/Copy.png" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="ApplicationCommands.Cut" >
                <MenuItem.Icon>
                    <Image Source="Resources/Cut.png" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="ApplicationCommands.Paste" >
                <MenuItem.Icon>
                    <Image Source="Resources/Paste.png" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>
        <Style TargetType="ToolTip">
            <Style.Triggers>
                <Trigger Property="Content"
                 Value="{x:Static sys:String.Empty}">
                    <Setter Property="Visibility"
                    Value="Collapsed" />
                </Trigger>
                <Trigger Property="Content"
                 Value="{x:Null}">
                    <Setter Property="Visibility"
                    Value="Collapsed" />
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="ContentPresenter">
                    <Style.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="TextWrapping" Value="Wrap" />
                        </Style>
                    </Style.Resources>
                </Style>
            </Style.Resources>
            <Setter Property="MaxWidth" Value="500" />
        </Style>
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
        </Style>
        <Style TargetType="{x:Type Button}">
            <Style.Resources>
                <Style TargetType="{x:Type Image}">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>
        <Style x:Key="GridViewColumnHeaderStyle1" TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="Background" Value="{Binding ControlBackgroundBrush}"/>
            <Setter Property="Foreground" Value="{Binding ControlForegroundBrush}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Background" Value="LightSlateGray"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="WaterMarkTextBoxStyle" BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid>
                            <Border x:Name="Bd" SnapsToDevicePixels="True" 
                                  Background="{TemplateBinding Background}" 
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="{TemplateBinding BorderThickness}" >
                                <Grid>
                                    <ScrollViewer x:Name="PART_ContentHost"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    <TextBlock x:Name="textBlock"
                               Opacity="0.5"
                               Text="{TemplateBinding Tag}"
                               Padding="2,0,0,0"
                               TextWrapping="Wrap"
                               Visibility="Hidden" />
                                </Grid>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{Binding TextBoxFocusBorderBrush}">
                                </Setter>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Text" Value="" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Visibility" TargetName="textBlock" Value="Visible" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style
            TargetType="{x:Type TextBlock}"
            x:Key="StatusBarTextBlock">
            <Setter
                Property="TextWrapping"
                Value="NoWrap" />
            <Setter
                Property="TextTrimming"
                Value="CharacterEllipsis" />
            <Setter
                Property="Padding"
                Value="2,0" />
        </Style>
        <local:BoolInverterConverter x:Key="BoolInverterConverter1"/>
        <local:BoolInverterConverter x:Key="BoolInverterConverter2"/>
        <local:BoolToBackgroundColorConverter x:Key="BoolToBackgroundColorConverter1"/>
        <local:BoolToForegroundColorConverter x:Key="BoolToForegroundColorConverter1"/>
        <local:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter1"/>
        <local:BooleanToVisibilityInverterConverter x:Key="BooleanToVisibilityInverterConverter1"/>
        <local:BooleanToVisibilityInverterConverterEx x:Key="BooleanToVisibilityInverterConverterEx1"/>
        <local:MathConverter x:Key="MathConverter"/>

        <Style TargetType="{x:Type local:ChoMruComboBox}" >
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:ChoMruComboBox}">
                        <ComboBox ItemsSource="{Binding MruSource, RelativeSource={RelativeSource TemplatedParent}}"
                                Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                IsEditable="True" IsTextSearchEnabled="True" IsTextSearchCaseSensitive="False" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>
    <DockPanel>
        <StatusBar DockPanel.Dock="Bottom" Margin="5,0,5,5" Width="Auto">
            <StatusBarItem
                VerticalContentAlignment="Top"
                Focusable="False"
                Padding="0">
                <TextBlock
                    Style="{StaticResource StatusBarTextBlock}"
                    x:Name="sbAppStatus"><Run Text="{Binding AppStatusText}"/></TextBlock>
            </StatusBarItem>
        </StatusBar>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="{Binding ControlPanelWidth, Mode=TwoWay}" >
                    <ColumnDefinition.Style>
                        <Style TargetType="{x:Type ColumnDefinition}">
                            <Setter Property="MinWidth" Value="350" />
                            <!-- Default MinHeight -->
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=expControlPanel, Path=IsExpanded}" Value="False">
                                    <Setter Property="MinWidth" Value="24" />
                                    <!-- MinHeight when Collapsed -->
                                    <Setter Property="MaxWidth" Value="40" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=expControlPanel, Path=IsExpanded}" Value="True">
                                    <Setter Property="MaxWidth" Value="{Binding ElementName=ChoEazyCopyWindow, Path=Width, Converter={StaticResource MathConverter}, ConverterParameter=@VALUE/2 }" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ColumnDefinition.Style>
                </ColumnDefinition>
            </Grid.ColumnDefinitions>
            <DockPanel Grid.Column="0" LastChildFill="true">
                <Ribbon DockPanel.Dock="Top" x:Name="RibbonWin" SelectedIndex="0" Loaded="RibbonWin_Loaded" MinWidth="500" Margin="0,0,5,0" ContextMenu="{x:Null}"
                        Background="{Binding ControlBackgroundBrush}"
                        Foreground="{Binding ControlForegroundBrush}">
                    <Ribbon.ApplicationMenu>
                        <RibbonApplicationMenu Visibility="Collapsed"></RibbonApplicationMenu>
                    </Ribbon.ApplicationMenu>
                    <RibbonTab Header="Home" KeyTip="H" ContextMenu="{x:Null}">
                        <RibbonGroup x:Name="HomeGroup" Header="Action" ContextMenu="{x:Null}">
                            <RibbonButton x:Name="btnRun" LargeImageSource="Resources\Run.png" Label="Run" KeyTip="R" Click="btnRun_Click"  ContextMenu="{x:Null}"/>
                            <RibbonButton x:Name="btnStop" SmallImageSource="Resources\Stop.png" Label="Stop" KeyTip="T" Click="btnStop_Click"  ContextMenu="{x:Null}"/>
                            <RibbonButton x:Name="btnClear" SmallImageSource="Resources\Erase.png" Label="Clear Output" KeyTip="E" Click="btnClear_Click"  ContextMenu="{x:Null}"/>
                            <RibbonCheckBox x:Name="btnScrollOutput" SmallImageSource="Resources\Scroll.png" Label="Scroll Output" KeyTip="L" IsChecked="{Binding ScrollOutput}"  ContextMenu="{x:Null}"/>
                        </RibbonGroup>
                        <RibbonGroup x:Name="FileGroup" Header="File" ContextMenu="{x:Null}">
                            <!--<RibbonButton x:Name="btnNewFile" LargeImageSource="Resources\NewFile.png" Label="New" KeyTip="N" Click="btnNewFile_Click"  ContextMenu="{x:Null}"/>-->
                            <RibbonMenuButton x:Name="btnNewFile" 
                                    Label="New"
                                    SmallImageSource="Resources\NewFile.png"
                                    LargeImageSource="Resources\NewFile.png" KeyTip="N" >
                                <RibbonMenuItem 
                                    Header="Empty Job"
                                    ImageSource="Resources\NewFile.png" Click="btnNewFile_Click"  ContextMenu="{x:Null}"/>
                                <RibbonMenuItem 
                                    Header="Synchronization Job"
                                    ImageSource="Resources\SyncJob.png" ToolTip="With the Synchronization job all new and modified files of source folder are mirrored to destination folder. Files and folders which don't exist anymore in the source folder when the job runs will be deleted in the destination folder."
                                    Click="btnNewSyncFile_Click"  ContextMenu="{x:Null}" />
                                <RibbonMenuItem 
                                    Header="Copy Job"
                                    ImageSource="Resources\CopyJob.png" ToolTip="With the Copy job all new and modified files of source folder are also copied to destination folder. However files and folders which previously has been copied to the destination folder but doesn't exist anymore when the job runs, will be kept in the destination folder."
                                    Click="btnNewCopyFile_Click"  ContextMenu="{x:Null}"/>
                                <RibbonMenuItem 
                                    Header="Move Job"
                                    ImageSource="Resources\MoveJob.png" ToolTip="With the Move job, move all files/folders from source location to destination location. All successfull moved files/folders are removed from the source."
                                    Click="btnNewMoveFile_Click"  ContextMenu="{x:Null}"/>
                            </RibbonMenuButton>
                            <RibbonButton x:Name="btnOpenFile" SmallImageSource="Resources\OpenFile.png" Label="Open" KeyTip="O" Click="btnOpenFile_Click"  ContextMenu="{x:Null}"/>
                            <RibbonButton x:Name="btnSaveFile" SmallImageSource="Resources\SaveFile.png" Label="Save" KeyTip="S" Click="btnSaveFile_Click"  ContextMenu="{x:Null}"/>
                            <RibbonButton x:Name="btnSaveAsFile" SmallImageSource="Resources\SaveAsFile.png" Label="Save As" KeyTip="A" Click="btnSaveAsFile_Click"  ContextMenu="{x:Null}"/>
                        </RibbonGroup>
                        <!--<RibbonGroup x:Name="DonateGroup" ContextMenu="{x:Null}">
                            <RibbonButton x:Name="btnDonate" LargeImageSource="Resources\Donate.png" Label="Donate" KeyTip="D" Click="BtnDonate_Click" ToolTip="Your support is much appreciated." ContextMenu="{x:Null}"/>
                        </RibbonGroup>-->
                        <!--<RibbonGroup VerticalAlignment="Center" ContextMenu="{x:Null}">
                            <DockPanel LastChildFill="True">
                                <TextBlock DockPanel.Dock="Bottom">Settings File</TextBlock>
                                <TextBlock x:Name="tbSettingsName" FontSize="24" FontWeight="Bold" Foreground="DarkBlue" 
                                            Width="Auto" VerticalAlignment="Stretch" FontFamily="Verdana"
                                           Text="{Binding SettingsFileName}" ToolTip="{Binding SettingsFilePath}"
                                           />
                            </DockPanel>
                        </RibbonGroup>-->
                        <RibbonGroup x:Name="HelpGroup" ContextMenu="{x:Null}">
                            <RibbonButton x:Name="btnHelp" LargeImageSource="Resources\Help.png" Label="Help" KeyTip="D" Click="btnHelp_Click" ToolTip="RoboCopy offical help" ContextMenu="{x:Null}"/>
                        </RibbonGroup>
                    </RibbonTab>
                </Ribbon>

                <DockPanel
        HorizontalAlignment="Stretch"
        x:Name="dockPanel1"
        VerticalAlignment="Stretch"
        LastChildFill="True"
        FocusManager.FocusedElement="{Binding ElementName=txtFolder}">
                    <Grid
            Width="Auto"
            DockPanel.Dock="Top">
                        <Grid.RowDefinitions>
                            <RowDefinition></RowDefinition>
                            <RowDefinition></RowDefinition>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Border Margin="5,5,5,0" Grid.Row="0" BorderThickness="1" BorderBrush="Gray" Background="LightSlateGray" >
                            <DockPanel LastChildFill="true">
                                <Label FontWeight="Bold" Foreground="{Binding ControlBackgroundBrush}">TASK FILE:</Label>
                                <TextBlock Foreground="{Binding ControlBackgroundBrush}" VerticalAlignment="Center" Text="{Binding SettingsFileName}" ToolTip="{Binding SettingsFilePath}"></TextBlock>
                                
                            </DockPanel>
                        </Border>

                        <GroupBox
                    x:Name="grpFolders"
                Margin="5"
                Height="Auto" Grid.Row="1"
                Grid.Column="0"
                >
                            <GroupBox.Header>
                                <DockPanel LastChildFill="True">
                                    <Button x:Name="btnSwapDir" DockPanel.Dock="Right" Content="Swap Directories" 
                                        xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                                        xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro" Click="btnSwapDir_Click"
                                    Style="{DynamicResource MetroButton}" />
                                    <TextBlock Text="CHOOSE FOLDERS" VerticalAlignment="Center"
                                        xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                                        xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro">
                                        <TextBlock.Foreground>
                                            <MultiBinding Converter="{x:Static Converters:BackgroundToForegroundConverter.Instance}">
                                                <Binding Mode="OneWay" Path="Background" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                                <Binding Mode="OneWay" Path="(Controls:GroupBoxHelper.HeaderForeground)" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                            </MultiBinding>
                                        </TextBlock.Foreground>
                                    </TextBlock>
                                </DockPanel>
                            </GroupBox.Header>

                            <Grid
                    Width="Auto"
                    Height="Auto"
                        >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="35*" />
                                    <ColumnDefinition Width="145*"/>
                                    <ColumnDefinition Width="368*"/>
                                    <ColumnDefinition Width="20" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Label FontWeight="Bold" Grid.Row="0" Grid.ColumnSpan="2">Source Directory</Label>
                                <TextBox 
                        x:Name="txtSourceDirectory"
                        VerticalAlignment="Stretch"
                        Grid.Row="1"
                        Grid.Column="0"
                        Margin="1"
                        TabIndex="0" Grid.ColumnSpan="3" 
                        Style="{StaticResource WaterMarkTextBoxStyle}" 
                        ToolTip="{Binding Path=SourceDirTooltip}"
                            Text="{Binding Path=AppSettings.SourceDirectory, UpdateSourceTrigger=PropertyChanged}"
                                    Background="{Binding SourceDirStatus, Converter={StaticResource BoolToBackgroundColorConverter1}}"
                                    Foreground="{Binding SourceDirStatus, Converter={StaticResource BoolToForegroundColorConverter1}}"
                        >
                                </TextBox>
                                <Button Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
                        Grid.Row="1"
                        Grid.Column="3"
                        Margin="1,0,1,2"
                        x:Name="btnSourceDirBrowse"
                        Click="btnSourceDirBrowse_Click"
                        TabIndex="1" ToolTip="Choose source directory..." VerticalAlignment="Bottom">
                                    <Image Source="Resources/OpenFolder.png" >
                                        <Image.Style>
                                            <Style TargetType="{x:Type Image}">
                                                <Style.Triggers>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Opacity" Value="0.5" />
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Image.Style>
                                    </Image>
                                </Button>
                                <Label FontWeight="Bold" Grid.Row="2" Grid.ColumnSpan="2">Destination Directory</Label>
                                <TextBox
                        x:Name="txtDestDirectory" 
                        Grid.Row="3" 
                        Grid.Column="0"
                        Margin="1"
                        TabIndex="2" Grid.ColumnSpan="3" 
                        Style="{StaticResource WaterMarkTextBoxStyle}"
                        ToolTip="Destination directory."
                            Text="{Binding Path=AppSettings.DestDirectory, UpdateSourceTrigger=PropertyChanged}"
                                    Background="{Binding DestDirStatus, Converter={StaticResource BoolToBackgroundColorConverter1}}"
                                    Foreground="{Binding DestDirStatus, Converter={StaticResource BoolToForegroundColorConverter1}}"
                            />
                                <Button Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
                        Grid.Row="3"
                        Grid.Column="3"
                        Margin="1,2,1,1"
                        x:Name="btnDestDirBrowse"
                        TabIndex="3" ToolTip="Choose destination directory..."
                                Click="btnDestDirBrowse_Click" >
                                    <Image Source="Resources/OpenFolder.png" >
                                        <Image.Style>
                                            <Style TargetType="{x:Type Image}">
                                                <Style.Triggers>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Opacity" Value="0.5" />
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Image.Style>
                                    </Image>
                                </Button>
                            </Grid>
                        </GroupBox>
                    </Grid>
                    <GroupBox DockPanel.Dock="Bottom" Visibility="{Binding Path=AppSettings.ListOnly, Converter={StaticResource BooleanToVisibilityInverterConverter1}}"
                              IsEnabled="{Binding IsNotRunning}">
                        <GroupBox.Header>
                            <DockPanel LastChildFill="True">
                                <CheckBox DockPanel.Dock="Right" Content="SHOW PROGRESS" IsChecked="{Binding Path=AppSettings.ShowRoboCopyProgress}"
    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro"
                                        Style="{DynamicResource MetroCheckBox}">
                                    <CheckBox.Foreground>
                                        <MultiBinding Converter="{x:Static Converters:BackgroundToForegroundConverter.Instance}">
                                            <Binding Mode="OneWay" Path="Background" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                            <Binding Mode="OneWay" Path="(Controls:GroupBoxHelper.HeaderForeground)" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                        </MultiBinding>
                                    </CheckBox.Foreground>
                                </CheckBox>
                                <TextBlock Text="ROBOCOPY PROGRESS" VerticalAlignment="Center"
    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro">
                                    <TextBlock.Foreground>
                                        <MultiBinding Converter="{x:Static Converters:BackgroundToForegroundConverter.Instance}">
                                            <Binding Mode="OneWay" Path="Background" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                            <Binding Mode="OneWay" Path="(Controls:GroupBoxHelper.HeaderForeground)" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                        </MultiBinding>
                                    </TextBlock.Foreground>
                                </TextBlock>
                            </DockPanel>
                        </GroupBox.Header>

                        <DockPanel x:Name="dpRoboCopyProgress" LastChildFill="true" >
                            <TextBlock DockPanel.Dock="Top" Text="Robocopy progress disabled." Visibility="{Binding Path=AppSettings.ShowRoboCopyProgress, Converter={StaticResource BooleanToVisibilityInverterConverter1}}" ></TextBlock>
                            <TextBlock DockPanel.Dock="Top" Text="{Binding RobocopyProgresssText}" Visibility="{Binding Path=AppSettings.ShowRoboCopyProgress, Converter={StaticResource BooleanToVisibilityConverter1}}" ></TextBlock>
                            <Grid Visibility="{Binding Path=AppSettings.ShowRoboCopyProgress, Converter={StaticResource BooleanToVisibilityConverter1}}">
                                <ProgressBar x:Name="pbar" Margin="0,5,0,5" Minimum="0" Maximum="100" Value="{Binding RobocopyProgresssBarValue}" Height="15" HorizontalAlignment="Stretch" />
                                <TextBlock HorizontalAlignment="Center" Foreground="White" VerticalAlignment="Center" Text="{Binding ElementName=pbar, Path=Value, StringFormat={}{0:0}%}"></TextBlock>
                            </Grid>
                        </DockPanel>
                    </GroupBox>
                    <Grid
            Width="Auto">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition
                    Height="100"
                    MinHeight="100" />
                            <RowDefinition
                    Height="Auto" />
                            <RowDefinition
                    Height="*"
                                />
                        </Grid.RowDefinitions>
                        <GroupBox
                            Margin="5,0,5,0"
                            Grid.Row="0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                            <GroupBox.Header>
                                <DockPanel LastChildFill="True">
                                    <CheckBox DockPanel.Dock="Right" Content="TEST RUN" IsChecked="{Binding Path=AppSettings.ListOnly}"
    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro"
                                        Style="{DynamicResource MetroCheckBox}">
                                        <CheckBox.Foreground>
                                            <MultiBinding Converter="{x:Static Converters:BackgroundToForegroundConverter.Instance}">
                                                <Binding Mode="OneWay" Path="Background" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                                <Binding Mode="OneWay" Path="(Controls:GroupBoxHelper.HeaderForeground)" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                            </MultiBinding>
                                        </CheckBox.Foreground>
                                    </CheckBox>
                                    <TextBlock Text="ROBOCOPY COMMAND" VerticalAlignment="Center"
    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro">
                                        <TextBlock.Foreground>
                                            <MultiBinding Converter="{x:Static Converters:BackgroundToForegroundConverter.Instance}">
                                                <Binding Mode="OneWay" Path="Background" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                                <Binding Mode="OneWay" Path="(Controls:GroupBoxHelper.HeaderForeground)" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                            </MultiBinding>
                                        </TextBlock.Foreground>
                                    </TextBlock>
                                </DockPanel>
                            </GroupBox.Header>

                            <DockPanel LastChildFill="True">
                                <TextBox Visibility="Collapsed"
                                Margin="0,3,0,2"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Name="txtRoboCopyCmdEx"
                                TabIndex="24" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" 
                                         IsReadOnly="True" 
                                         />
                                <TextBox
                                    Margin="0,3,0,2"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Name="txtRoboCopyCmd"
                                    TabIndex="24" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" 
                                    IsReadOnly="True"  />
                            </DockPanel>
                        </GroupBox>
                        <GridSplitter
                Margin="5,5,5,0"
                ResizeDirection="Rows"
                Grid.Row="1"
                Height="1"
                HorizontalAlignment="Stretch" IsTabStop="False" />
                        <GroupBox
                Margin="5,0,5,5"
                Grid.Row="2"
                VerticalAlignment="Stretch">
                            <GroupBox.Header>
                                <DockPanel LastChildFill="True">
                                    <CheckBox DockPanel.Dock="Right" Content="SHOW LINE NUMBERS" IsChecked="{Binding Path=AppSettings.ShowOutputLineNumbers}"
    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro"
                                        Style="{DynamicResource MetroCheckBox}">
                                        <CheckBox.Foreground>
                                            <MultiBinding Converter="{x:Static Converters:BackgroundToForegroundConverter.Instance}">
                                                <Binding Mode="OneWay" Path="Background" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                                <Binding Mode="OneWay" Path="(Controls:GroupBoxHelper.HeaderForeground)" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                            </MultiBinding>
                                        </CheckBox.Foreground>
                                    </CheckBox>
                                    <TextBlock Text="OUTPUT" VerticalAlignment="Center"
    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro">
                                        <TextBlock.Foreground>
                                            <MultiBinding Converter="{x:Static Converters:BackgroundToForegroundConverter.Instance}">
                                                <Binding Mode="OneWay" Path="Background" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                                <Binding Mode="OneWay" Path="(Controls:GroupBoxHelper.HeaderForeground)" RelativeSource="{RelativeSource AncestorType=GroupBox}" />
                                            </MultiBinding>
                                        </TextBlock.Foreground>
                                    </TextBlock>
                                </DockPanel>
                            </GroupBox.Header>
                            <avalonEdit:TextEditor
                        xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
                        Name="txtStatus"
                        FontFamily="Courier New"
                        SyntaxHighlighting="DOS"
                        FontSize="10pt"
                        IsReadOnly="true" 
                        TabIndex="25" 
                        ShowLineNumbers="{Binding Path=AppSettings.ShowOutputLineNumbers}"
                        VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto"
                                Background="{Binding ControlBackgroundBrush}"
                                Foreground="{Binding ControlForegroundBrush}"
                                />
                            <!--TextBox
                    Margin="0,3,0,2"
                    VerticalAlignment="Stretch"
                    x:Name="txtStatus"
                    IsReadOnly="True"
                    TabIndex="25" FontFamily="Courier New" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" /-->
                        </GroupBox>
                    </Grid>
                </DockPanel>

            </DockPanel>
            <Expander Grid.Column="2" ExpandDirection="Left" IsExpanded="True" x:Name="expControlPanel"
                      ContextMenu="{StaticResource expControlPanelContextMenu}">
                <Expander.Header>
                    <TextBlock Text="Control Panel" Foreground="White" FontWeight="Bold">
                        <TextBlock.LayoutTransform>
                            <RotateTransform Angle="90"/>
                        </TextBlock.LayoutTransform>
                    </TextBlock>
                </Expander.Header>

                <TabControl TabStripPlacement="Bottom" Grid.Column="2" x:Name="tabControlPanel" >
                    <TabControl.Resources>
                        <Style TargetType="{x:Type TabItem}">
                            <Setter Property="HeaderTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <ContentPresenter TextBlock.FontWeight="Bold" Content="{TemplateBinding Content}">
                                            <ContentPresenter.LayoutTransform>
                                                <RotateTransform Angle="0" />
                                            </ContentPresenter.LayoutTransform>
                                        </ContentPresenter>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </TabControl.Resources>
                    <TabItem Header="RoboCopy Options" ToolTip="" x:Name="tabRoboCopyOptionsItem" >
                        <DockPanel LastChildFill="True">
                            <TextBlock DockPanel.Dock="Top" x:Name="txtPropertyGridWaterMark" FontSize="20" TextWrapping="WrapWithOverflow" FontWeight="Bold" 
                                       Foreground="Red" Text="{Binding PropertyGridTooltip}" ToolTip="{Binding PropertyGridTooltip}"
                                        Visibility="Collapsed" />
                            <local:ExtendedPropertyGrid  Margin="-3" VerticalAlignment="Stretch" x:Name="pgAppSettings" 
                                                    SelectedObject="{Binding AppSettings}" SelectedObjectName="" ShowTitle="False" 
                                           ShowDescriptionByTooltip="True" FilterWatermark="{Binding PropertyGridTooltip}" 
                                                         ToolTip="{Binding PropertyGridTooltip}"/>
                        </DockPanel>
                    </TabItem>
                    <TabItem Header="Backup Tasks" x:Name="tabBackupTasks" ToolTip="" >
                        <GroupBox Header="Backup Tasks" Margin="-3" x:Name="grpBackupTasks">
                            <DockPanel LastChildFill="True">
                                <DockPanel DockPanel.Dock="Top" HorizontalAlignment="Stretch">
                                    <TextBlock DockPanel.Dock="Top" FontWeight="Bold">Directory</TextBlock>
                                    <DockPanel LastChildFill="True" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch">
                                        <Button Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" Height="20"  Width="20" DockPanel.Dock="Right"
                                            x:Name="btnFindBackupTaskDirectoryInFileExplorer" 
                                                ToolTip="Find backup task directory in file explorer" 
                                                VerticalAlignment="Center"
                                                Click="btnFindBackupTaskDirectoryInFileExplorer_Click" 
                                                IsEnabled="{Binding BackupTaskDirStatus}">
                                            <Image Source="{iconPacks:FontAwesomeImage Kind=SearchSolid}" >
                                                <Image.Style>
                                                    <Style TargetType="{x:Type Image}">
                                                        <Style.Triggers>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Opacity" Value="0.5" />
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>
                                        </Button>
                                        <Button Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" Width="20" DockPanel.Dock="Right"
                                            Margin="1,0,1,2"
                                            x:Name="btnRefreshBackupTasks"
                                            ToolTip="Reload backup tasks..." VerticalAlignment="Bottom"
                                                Click="btnRefreshBackupTasks_Click"
                                                IsEnabled="{Binding BackupTaskDirStatus}"
                                                >
                                            <Image Source="Resources/Refresh.png" >
                                                <Image.Style>
                                                    <Style TargetType="{x:Type Image}">
                                                        <Style.Triggers>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Opacity" Value="0.5" />
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>
                                        </Button>
                                        <Button Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"  Width="20" DockPanel.Dock="Right"
                                            Margin="1,0,1,2"
                                            x:Name="btnBackupTaskDirectory"
                                            ToolTip="Choose backup tasks directory..." VerticalAlignment="Bottom"
                                                Click="btnBackupTaskDirectory_Click"
                                                >
                                            <Image Source="Resources/OpenFolder.png" >
                                                <Image.Style>
                                                    <Style TargetType="{x:Type Image}">
                                                        <Style.Triggers>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Opacity" Value="0.5" />
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>
                                        </Button>
                                        <local:ChoMruComboBox 
                                            HorizontalAlignment="Stretch" MruSource="{Binding RecentNumbersList}" 
                                            Text="{Binding Path=BackupTaskDirectory, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                                            Background="{Binding BackupTaskDirStatus, Converter={StaticResource BoolToBackgroundColorConverter1}}"
                                            Foreground="{Binding BackupTaskDirStatus, Converter={StaticResource BoolToForegroundColorConverter1}}"
                                        />

                                        <!--TextBox HorizontalAlignment="Stretch"
                                            x:Name="txtBackupTasksDirectory"
                                            Margin="1"
                                            TabIndex="0" 
                                            Style="{StaticResource WaterMarkTextBoxStyle}" 
                                            ToolTip="{Binding BackupTaskDirTooltip}"
                                                Text="{Binding Path=BackupTaskDirectory, UpdateSourceTrigger=PropertyChanged}"
                                                        Background="{Binding BackupTaskDirStatus, Converter={StaticResource BoolToBackgroundColorConverter1}}"
                                                        Foreground="{Binding BackupTaskDirStatus, Converter={StaticResource BoolToForegroundColorConverter1}}"
                                            >
                                        </TextBox-->
                                    </DockPanel>
                                </DockPanel>

                                <DockPanel LastChildFill="True">
                                    <DockPanel LastChildFill="True" DockPanel.Dock="Bottom">
                                        <StackPanel Margin="0,5,0,0" Orientation="Vertical" DockPanel.Dock="Right" VerticalAlignment="Bottom" >
                                            <Button Margin="5,0,0,0" x:Name="btnCloneTask" DockPanel.Dock="Right" Content="CLONE" IsEnabled="{Binding CloneTaskEnabled }"
                                                Style="{DynamicResource MetroButton}" Click="btnCloneTask_Click" 
                                                    ToolTip="Clone task"/>
                                            <Button Margin="5,5,0,0" x:Name="btnDeleteTask" DockPanel.Dock="Right" Content="DELETE" IsEnabled="{Binding DeleteTaskEnabled }"
                                                Style="{DynamicResource MetroButton}" Click="btnDeleteTask_Click" ToolTip="Delete task"/>
                                            <Button Margin="5,5,0,0" x:Name="btnQueueTask" DockPanel.Dock="Right" Content="QUEUE" IsEnabled="{Binding QueueTaskEnabled }"
                                                Style="{DynamicResource MetroButton}" Click="btnQueueTask_Click"  ToolTip="Queue task"/>
                                        </StackPanel>
                                        <DockPanel LastChildFill="True">
                                            <TextBlock DockPanel.Dock="Top" FontWeight="Bold">Backup Task Comments</TextBlock>
                                            <TextBox x:Name="txtTaskComments" Margin="0,5,0,0" Height="70" VerticalScrollBarVisibility="Auto" 
                                                     TextWrapping="WrapWithOverflow"
                                                     Text="{Binding Path=AppSettings.Comments, UpdateSourceTrigger=PropertyChanged}" ToolTip="Backup Task Comments" />
                                        </DockPanel>
                                    </DockPanel>
                                    <ListView x:Name="lstBackupTasks" Margin="0,5,0,0" BorderThickness="1" BorderBrush="LightGray" VerticalAlignment="Stretch"
                                             ItemsSource="{Binding BackupTaskInfos}" SelectedValuePath="FilePath" DisplayMemberPath="FileName" 
                                             SelectedValue="{Binding SelectedBackupTaskFilePath}"
                                             SelectedItem="{Binding SelectedBackupTaskItem}"
                                             local:ChoGridViewSort.AutoSort="True" 
                                             local:ChoGridViewColumnVisibilityManager.Enabled="True"
                                             FontFamily="Courier New" FontSize="12" ToolTip=""
                                               PreviewKeyUp="lstBackupTasks_PreviewKeyUp">
                                        <ListView.Resources>
                                            <ContextMenu x:Key="grdHeaderContextMenu">
                                                <MenuItem x:Name="mnuDateCreated" Header="Date Created" IsCheckable="true" IsChecked="{Binding DateCreated}" />
                                                <MenuItem x:Name="mnuDateModified" Header="Date Modified" IsCheckable="true" IsChecked="{Binding DateModified}" />
                                                <Separator />
                                                <MenuItem Header="Clone Options">
                                                    <MenuItem Header="Keep Date Created" IsCheckable="true" IsChecked="{Binding KeepDateCreated}"/>
                                                    <MenuItem Header="Keep Date Modified" IsCheckable="true" IsChecked="{Binding KeepDateModified}" />
                                                </MenuItem>
                                                <Separator />
                                                <MenuItem x:Name="mnuColumnToFit" Header="Size Column to Fit" Click="mnuColumnToFit_Click" />
                                                <MenuItem x:Name="mnuAllColumnsToFit" Header="Size All Columns to Fit" Click="mnuAllColumnsToFit_Click" />
                                                <Separator />
                                                <MenuItem Header="Confirm on Delete Task" IsCheckable="True" IsChecked="{Binding ConfirmOnDelete}" />
                                                <MenuItem Header="Watch for Changes" IsCheckable="True" IsChecked="{Binding WatchForChanges}" />
                                            </ContextMenu>
                                            <ContextMenu x:Key="grdItemContextMenu">
                                                <MenuItem x:Name="mnuCloneTask" Header="Clone Task" Click="mnuCloneTask_Click" InputGestureText="Ctrl+V" />
                                                <MenuItem x:Name="mnuDeleteTask" Header="Delete Task" Click="mnuDeleteTask_Click" InputGestureText="Del" />
                                                <MenuItem x:Name="mnuQueueTask" Header="Queue Task" Click="mnuQueueTask_Click"  InputGestureText="Ctrl+Q" />
                                                <Separator />
                                                <MenuItem Header="Clone Options">
                                                    <MenuItem Header="Keep Date Created" IsCheckable="true" IsChecked="{Binding KeepDateCreated, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
                                                    <MenuItem Header="Keep Date Modified" IsCheckable="true" IsChecked="{Binding KeepDateModified, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />
                                                </MenuItem>
                                                <Separator />
                                                <MenuItem Header="Confirm on Delete Task" IsCheckable="True" IsChecked="{Binding ConfirmOnDelete, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />
                                                <MenuItem Header="Watch for Changes" IsCheckable="True" IsChecked="{Binding WatchForChanges, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />
                                            </ContextMenu>
                                        </ListView.Resources>
                                        <ListView.ItemContainerStyle>
                                            <Style TargetType="{x:Type ListViewItem}">
                                                <!--<EventSetter Event="PreviewMouseLeftButtonDown" Handler="OnListViewItem_PreviewMouseLeftButtonDown" />-->
                                                <Setter Property="ContextMenu" Value="{StaticResource grdItemContextMenu}"/>
                                            </Style>
                                        </ListView.ItemContainerStyle>
                                        <ListView.View>
                                            <GridView AllowsColumnReorder="true" ColumnHeaderContainerStyle="{StaticResource GridViewColumnHeaderStyle1}">
                                                <GridViewColumn x:Name="grdTaskNameColumn" Width="{Binding TaskNameColumnWidth}" DisplayMemberBinding="{Binding Path=TaskName}" 
                                                                local:ChoGridViewSort.PropertyName="TaskName" >
                                                    <GridViewColumnHeader x:Name="grdTaskNameColumnHeader" Content="TASK NAME" ContextMenu="{StaticResource grdHeaderContextMenu}" 
                                                                          SizeChanged="TaskNameGridViewColumnHeader_SizeChanged" Tag="TaskName"
                                                                          MouseDown="GridViewColumnHeader_MouseDown" Click="grdBackupTaskColumnHeader_Click" />
                                                </GridViewColumn>
                                                <GridViewColumn x:Name="grdDateCreatedColumn" Width="{Binding DateCreatedColumnWidth}" 
                                                                DisplayMemberBinding="{Binding Path=CreatedDate, StringFormat='dd-MMM-yyyy hh:mm:ss tt'}" 
                                                                local:ChoGridViewSort.PropertyName="CreatedDate" 
                                                                local:ChoGridViewColumnVisibilityManager.IsVisible="{Binding DateCreatedVisibility}">
                                                    <GridViewColumnHeader x:Name="grdDateCreatedColumnHeader" Content="DATE CREATED" ContextMenu="{StaticResource grdHeaderContextMenu}" 
                                                                          SizeChanged="DateCreatedGridViewColumnHeader_SizeChanged" Tag="CreatedDate"
                                                                          MouseDown="GridViewColumnHeader_MouseDown" Click="grdBackupTaskColumnHeader_Click" />
                                                </GridViewColumn>
                                                <GridViewColumn x:Name="grdDateModifiedColumn" Width="{Binding DateModifiedColumnWidth}" 
                                                                DisplayMemberBinding="{Binding Path=ModifiedDate, StringFormat='dd-MMM-yyyy hh:mm:ss tt'}" 
                                                                local:ChoGridViewSort.PropertyName="ModifiedDate" 
                                                                local:ChoGridViewColumnVisibilityManager.IsVisible="{Binding DateModifiedVisibility}" >
                                                    <GridViewColumnHeader x:Name="grdDateModifiedColumnHeader" Content="DATE MODIFIED" ContextMenu="{StaticResource grdHeaderContextMenu}" 
                                                                          SizeChanged="DateModifiedGridViewColumnHeader_SizeChanged" Tag="ModifiedDate"
                                                                          MouseDown="GridViewColumnHeader_MouseDown" Click="grdBackupTaskColumnHeader_Click"/>
                                                </GridViewColumn>
                                            </GridView>
                                        </ListView.View>
                                    </ListView>

                                    <!--<ListBox x:Name="lstBackupTasks" Margin="0,5,0,0" BorderThickness="1" BorderBrush="LightGray" VerticalAlignment="Stretch"
                                             ItemsSource="{Binding BackupTaskInfos}" SelectedValuePath="FilePath" DisplayMemberPath="FileName" 
                                             SelectedValue="{Binding SelectedBackupTaskFilePath}" >-->
                                </DockPanel>
                            </DockPanel>
                        </GroupBox>
                    </TabItem>
                    <TabItem Header="Task Queue" x:Name="tabTaskQueue" ToolTip="" >
                        <GroupBox Header="Task Queue" Margin="-3" x:Name="grpTaskQueue">
                            <DockPanel LastChildFill="True">
                                <StackPanel Margin="0,5,0,0" DockPanel.Dock="Bottom" Orientation="Horizontal" >
                                    <Button Margin="0,0,0,0" x:Name="btnTaskQStopTask" Content="STOP" IsEnabled="{Binding TaskQStopTaskEnabled }"
                                            Style="{DynamicResource MetroButton}" Click="btnTaskQStopTask_Click" ToolTip="Stop task"/>
                                    <!--<Button Margin="5,0,0,0" x:Name="btnTaskQMoveUpTask" Content="MOVE UP" IsEnabled="{Binding TaskQMoveUpTaskEnabled }"
                                            Style="{DynamicResource MetroButton}" Click="btnTaskQMoveUpTask_Click"  ToolTip="Move Up task"/>
                                    <Button Margin="5,0,0,0" x:Name="btnTaskQMoveDownTask" Content="MOVE DOWN" IsEnabled="{Binding TaskQMoveDownTaskEnabled }"
                                            Style="{DynamicResource MetroButton}" Click="btnTaskQMoveDownTask_Click"  ToolTip="Move Down task"/>-->
                                    <Button Margin="5,0,0,0" x:Name="btnTaskQRemoveTask" Content="REMOVE" IsEnabled="{Binding TaskQRemoveTaskEnabled }"
                                            Style="{DynamicResource MetroButton}" Click="btnTaskQRemoveTask_Click"  ToolTip="Remove task"/>
                                    <Button Margin="5,0,0,0" x:Name="btnOpenTaskLogFile" DockPanel.Dock="Right" Content="OPEN LOG FILE" IsEnabled="{Binding OpenTaskLogFileEnabled }"
                                                Style="{DynamicResource MetroButton}" Click="btnOpenTaskLogFile_Click"  ToolTip="Open task log file"/>
                                    <Button Margin="5,0,0,0" x:Name="btnOpenTaskLogFolder" DockPanel.Dock="Right" Content="OPEN LOG FOLDER" IsEnabled="{Binding OpenTaskLogFolderEnabled }"
                                                Style="{DynamicResource MetroButton}" Click="btnOpenTaskLogFolder_Click"  ToolTip="Open task log folder"/>
                                </StackPanel>
                                <ListView x:Name="lstTaskQueue" Margin="0,0,0,0" BorderThickness="1" BorderBrush="LightGray" VerticalAlignment="Stretch"
                                             ItemsSource="{Binding TaskQueueItems}" SelectedValuePath="Id" 
                                             SelectedValue="{Binding SelectedTaskQueueItemId}"
                                             SelectedItem="{Binding SelectedTaskQueueItem}"
                                             local:ChoGridViewSort.AutoSort="True" 
                                             local:ChoGridViewColumnVisibilityManager.Enabled="True"
                                             FontFamily="Courier New" FontSize="12" ToolTip=""
                                               PreviewKeyUp="lstTaskQueue_PreviewKeyUp">
                                    <ListView.Resources>
                                        <ContextMenu x:Key="grdTaskQueueHeaderContextMenu">
                                            <MenuItem x:Name="mnuTaskQColumnToFit" Header="Size Column to Fit" Click="mnuTaskQColumnToFit_Click" />
                                            <MenuItem x:Name="mnuTaskQAllColumnsToFit" Header="Size All Columns to Fit" Click="mnuTaskQAllColumnsToFit_Click" />
                                            <Separator />
                                            <MenuItem Header="Confirm on Delete Task" IsCheckable="True" IsChecked="{Binding ConfirmOnDelete}" />
                                        </ContextMenu>
                                        <ContextMenu x:Key="grdTaskQueueItemContextMenu">
                                            <MenuItem x:Name="mnuTaskQStopTask" Header="Stop Task" Click="mnuCloneTask_Click" InputGestureText="Ctrl+S" IsEnabled="{Binding TaskQStopTaskEnabled }"/>
                                            <!--<MenuItem x:Name="mnuTaskQMoveUpTask" Header="Move Up Task" Click="mnuDeleteTask_Click" InputGestureText="Ctrl+Up" IsEnabled="{Binding TaskQMoveUpTaskEnabled }"/>
                                            <MenuItem x:Name="mnuTaskQMoveDownTask" Header="Move Down Task" Click="mnuDeleteTask_Click" InputGestureText="Ctrl+Down" IsEnabled="{Binding TaskQMoveDownTaskEnabled }"/>-->
                                            <MenuItem x:Name="mnuTaskQRemoveTask" Header="Remove Task" Click="mnuDeleteTask_Click" InputGestureText="Del" IsEnabled="{Binding TaskQRemoveTaskEnabled }"/>
                                            <MenuItem x:Name="mnuTaskQOpenLogFile" Header="Open log file" Click="mnuTaskQOpenLogFile_Click" InputGestureText="Ctrl+O" IsEnabled="{Binding OpenTaskLogFileEnabled }"/>
                                            <Separator />
                                            <MenuItem Header="Confirm on Delete Task" IsCheckable="True" IsChecked="{Binding ConfirmOnDelete, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />
                                        </ContextMenu>
                                    </ListView.Resources>
                                    <ListView.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListBoxItem}">
                                            <!--<EventSetter Event="PreviewMouseLeftButtonDown" Handler="OnListViewItem_PreviewMouseLeftButtonDown" />-->
                                            <Setter Property="ContextMenu" Value="{StaticResource grdTaskQueueItemContextMenu}"/>
                                            <Setter Property="Padding" Value="0,0,0,0"/>
                                            <Setter Property="Margin" Value="0,0,0,0"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Status}" Value="3">
                                                    <Setter Property="Background" Value="LightGreen" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Status}" Value="2">
                                                    <Setter Property="Background" Value="Red" />
                                                    <Setter Property="Foreground" Value="White" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Status}" Value="1">
                                                    <Setter Property="Background" Value="Yellow" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ListView.ItemContainerStyle>
                                    <ListView.View>
                                        <GridView AllowsColumnReorder="true" ColumnHeaderContainerStyle="{StaticResource GridViewColumnHeaderStyle1}">
                                            <GridViewColumn x:Name="grdTaskQIdColumn" Width="{Binding TaskQIdColumnWidth}" DisplayMemberBinding="{Binding Path=Id}" 
                                                                local:ChoGridViewSort.PropertyName="Id" >
                                                <GridViewColumnHeader x:Name="grdTaskQTaskIdColumnHeader" Content="ID" ContextMenu="{StaticResource grdTaskQueueHeaderContextMenu}" 
                                                                          SizeChanged="grdTaskQIdColumnHeader_SizeChanged"  Tag="TaskName"
                                                                          MouseDown="GridViewTaskQColumnHeader_MouseDown" Click="grdTaskQColumnHeader_Click" />
                                            </GridViewColumn>
                                            <GridViewColumn x:Name="grdTaskQNameColumn" Width="{Binding TaskQNameColumnWidth}" DisplayMemberBinding="{Binding Path=TaskName}" 
                                                                local:ChoGridViewSort.PropertyName="TaskName" >
                                                <GridViewColumnHeader x:Name="grdTaskQTaskNameColumnHeader" Content="TASK NAME" ContextMenu="{StaticResource grdTaskQueueHeaderContextMenu}" 
                                                                          SizeChanged="grdTaskQNameColumnHeader_SizeChanged"  Tag="TaskName"
                                                                          MouseDown="GridViewTaskQColumnHeader_MouseDown" Click="grdTaskQColumnHeader_Click" />
                                            </GridViewColumn>
                                            <GridViewColumn x:Name="grdTaskQQueueTimeColumn" Width="{Binding TaskQQueueTimeColumnWidth}" 
                                                                DisplayMemberBinding="{Binding Path=QueueTime, StringFormat='dd-MMM-yyyy hh:mm:ss tt'}" 
                                                                local:ChoGridViewSort.PropertyName="QueueTime" 
                                                                local:ChoGridViewColumnVisibilityManager.IsVisible="{Binding QueueTime}">
                                                <GridViewColumnHeader x:Name="grdTaskQQueueTimeColumnHeader" Content="QUEUE TIME" ContextMenu="{StaticResource grdTaskQueueHeaderContextMenu}" 
                                                                          SizeChanged="grdTaskQQueueTimeColumnHeader_SizeChanged"  Tag="QueueTime"
                                                                          MouseDown="GridViewTaskQColumnHeader_MouseDown" Click="grdTaskQColumnHeader_Click" />
                                            </GridViewColumn>
                                            <GridViewColumn x:Name="grdTaskQStartTimeColumn" Width="{Binding TaskQStartTimeColumnWidth}" 
                                                                DisplayMemberBinding="{Binding Path=StartTime, StringFormat='dd-MMM-yyyy hh:mm:ss tt'}" 
                                                                local:ChoGridViewSort.PropertyName="StartTime" 
                                                                local:ChoGridViewColumnVisibilityManager.IsVisible="{Binding StartTime}">
                                                <GridViewColumnHeader x:Name="grdTaskQStartTimeColumnHeader" Content="START TIME" ContextMenu="{StaticResource grdTaskQueueHeaderContextMenu}" 
                                                                          SizeChanged="grdTaskQStartTimeColumnHeader_SizeChanged"  Tag="StartTime"
                                                                          MouseDown="GridViewTaskQColumnHeader_MouseDown" Click="grdTaskQColumnHeader_Click" />
                                            </GridViewColumn>
                                            <GridViewColumn x:Name="grdTaskQEndTimeColumn" Width="{Binding DateModifiedColumnWidth}" 
                                                                DisplayMemberBinding="{Binding Path=EndTime, StringFormat='dd-MMM-yyyy hh:mm:ss tt'}" 
                                                                local:ChoGridViewSort.PropertyName="EndTime" 
                                                                local:ChoGridViewColumnVisibilityManager.IsVisible="{Binding EndTime}" >
                                                <GridViewColumnHeader x:Name="grdTaskQEndTimeColumnHeader" Content="END TIME" ContextMenu="{StaticResource grdTaskQueueHeaderContextMenu}" 
                                                                          SizeChanged="grdTaskQEndTimeColumnHeader_SizeChanged"  Tag="EndTime"
                                                                          MouseDown="GridViewTaskQColumnHeader_MouseDown" Click="grdTaskQColumnHeader_Click"/>
                                            </GridViewColumn>
                                            <GridViewColumn x:Name="grdTaskQStatusColumn" Width="{Binding DateModifiedColumnWidth}" 
                                                                DisplayMemberBinding="{Binding Path=Status}" 
                                                                local:ChoGridViewSort.PropertyName="Status" 
                                                                local:ChoGridViewColumnVisibilityManager.IsVisible="{Binding Status}" >
                                                <GridViewColumnHeader x:Name="grdTaskQStatusColumnHeader" Content="STATUS" ContextMenu="{StaticResource grdTaskQueueHeaderContextMenu}" 
                                                                          SizeChanged="grdTaskQStatusColumnHeader_SizeChanged" Tag="Status"
                                                                          MouseDown="GridViewTaskQColumnHeader_MouseDown" Click="grdTaskQColumnHeader_Click"/>
                                            </GridViewColumn>
                                            <GridViewColumn x:Name="grdTaskQErrorMsgColumn" Width="{Binding DateModifiedColumnWidth}" 
                                                                DisplayMemberBinding="{Binding Path=ErrorMessage}" 
                                                                local:ChoGridViewSort.PropertyName="Status" 
                                                                local:ChoGridViewColumnVisibilityManager.IsVisible="{Binding ErrorMessage}" >
                                                <GridViewColumnHeader x:Name="grdTaskQErrorMsgColumnHeader" Content="ERROR MSG" ContextMenu="{StaticResource grdTaskQueueHeaderContextMenu}" 
                                                                          SizeChanged="grdTaskQErrorMsgColumnHeader_SizeChanged" Tag="ErrorMessage"
                                                                          MouseDown="GridViewTaskQColumnHeader_MouseDown" Click="grdTaskQColumnHeader_Click"/>
                                            </GridViewColumn>
                                        </GridView>
                                    </ListView.View>
                                </ListView>

                                <!--<ListBox x:Name="lstBackupTasks" Margin="0,5,0,0" BorderThickness="1" BorderBrush="LightGray" VerticalAlignment="Stretch"
                                             ItemsSource="{Binding BackupTaskInfos}" SelectedValuePath="FilePath" DisplayMemberPath="FileName" 
                                             SelectedValue="{Binding SelectedBackupTaskFilePath}" >-->
                            </DockPanel>
                        </GroupBox>
                    </TabItem>
                </TabControl>
            </Expander>

            <GridSplitter Grid.Column="1" Width="1" HorizontalAlignment="Right" VerticalAlignment="Stretch" ResizeBehavior="PreviousAndNext" IsTabStop="False" 
                          ResizeDirection="Columns" Background="{Binding TextBoxFocusBorderBrush}" />
        </Grid>
    </DockPanel>
</Controls:MetroWindow>
